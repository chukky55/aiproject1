/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package informed;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author Emmanuel 
 */
public class HillClimbingFrame extends javax.swing.JFrame {
    /**
     * visited nodes for hill search or tabu nodes -- nodes that cannot be revisited by tabu search
     */
    Collection visitedRows = new ArrayList();
    /**
     * visited nodes for hill search or tabu nodes -- nodes that cannot be revisited by tabu search
     */
    Collection hillVisitedRows = new ArrayList();    
    
    /**
     * tabu nodes for hill search or tabu nodes -- nodes that cannot be revisited by tabu search
     */
    Collection tabuRows = new ArrayList(); 
    /**
     * tabu nodes for hill search or tabu nodes -- nodes that cannot be revisited by tabu search
     */
    Collection tabuVisitedRows = new ArrayList();      

    /**
     * Creates new form HillClimbingFrame
     */
    public HillClimbingFrame() {
        super("Hill Climbing-  Mars Rover");
        initComponents();
        this.txtSearchNo.setText(5 + "");
        this.txtProblemXLen.setText(40 + "");
        this.txtMaxHeightY.setText(200 + "");
        this.txtMaxWidthX.setText(300 + "");
        tbVisitedNodes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Node", "Position X", "Position Y"
            }
        ));        
    }

     /**
     * center any screen
     * @param frame a window 
     */
    public static void centerScreen(JFrame frame) {
        // Get the size of the screen
        try {
            // Set cross-platform Java L&F (also called "Metal")
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            /* UIManager.setLookAndFeel(
            UIManager.getCrossPlatformLookAndFeelClassName());*/
        } catch (UnsupportedLookAndFeelException e) {
            // handle exception
        } catch (ClassNotFoundException e) {
            // handle exception
        } catch (InstantiationException e) {
            // handle exception
        } catch (IllegalAccessException e) {
            // handle exception
        }         
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        // Determine the new location of the window
        int w = frame.getSize().width;
        int h = frame.getSize().height;
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;

        // Move the window
        frame.setLocation(x, y);
    }  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        txtCurrentY = new javax.swing.JTextField();
        txtNeiX = new javax.swing.JTextField();
        txtNeiY = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtProblemXLen = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtMaxHeightY = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtMaxWidthX = new javax.swing.JTextField();
        pbGenerateXY = new javax.swing.JButton();
        pbPlot = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtCurrentX = new javax.swing.JTextField();
        txtCurrentRow = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        pbTabuSearch = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtSearchNo = new javax.swing.JTextField();
        txtEndRow = new javax.swing.JTextField();
        pbClear = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbVisitedNodes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Diagram"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Criteria"));

        txtNeiY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNeiYActionPerformed(evt);
            }
        });

        jLabel3.setText("No of Nodes");

        jLabel4.setText("Max Height, 10m");

        jLabel5.setText("Max Width 10m");

        pbGenerateXY.setText("Generate Hill");
        pbGenerateXY.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pbGenerateXYMouseClicked(evt);
            }
        });

        pbPlot.setText("Hill Search");
        pbPlot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pbPlotMouseClicked(evt);
            }
        });
        pbPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pbPlotActionPerformed(evt);
            }
        });

        jLabel2.setText("End Node");

        jLabel1.setText("Start Node");

        txtCurrentX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCurrentXActionPerformed(evt);
            }
        });

        jLabel7.setText("Step 1");

        jLabel8.setText("Step 2");

        jLabel9.setText("Step 3");

        pbTabuSearch.setText("Tabu Search");
        pbTabuSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pbTabuSearchMouseClicked(evt);
            }
        });

        jLabel10.setText("No Searches");

        pbClear.setText("Reset");
        pbClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pbClearMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtMaxHeightY, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtMaxWidthX, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtProblemXLen, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(txtSearchNo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEndRow, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(txtCurrentRow))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCurrentX, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNeiX, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNeiY)
                    .addComponent(txtCurrentY, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9))
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pbTabuSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pbGenerateXY, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pbClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pbPlot, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                .addGap(155, 155, 155))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txtProblemXLen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txtMaxHeightY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel5)
                            .addComponent(txtMaxWidthX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel1)
                            .addComponent(txtCurrentY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(pbGenerateXY)
                            .addComponent(jLabel8)
                            .addComponent(pbPlot)
                            .addComponent(txtCurrentRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNeiY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(pbTabuSearch)
                                .addComponent(pbClear))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txtCurrentX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNeiX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(txtSearchNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10)
                                .addComponent(txtEndRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Nodes"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Tabu"));

        tbVisitedNodes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tbVisitedNodes);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCurrentXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCurrentXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCurrentXActionPerformed

    private void txtNeiYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNeiYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNeiYActionPerformed

    private void pbGenerateXYMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pbGenerateXYMouseClicked
        // TODO add your handling code here
        String size = txtProblemXLen.getText();
        Random rand = new Random();
        if (size == null || size.trim().length() < 1)
        {
            JOptionPane.showMessageDialog(this, "Specify the Number of Nodes on the Hill", "Hill Nodes", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try
        {
            Integer.parseInt(size);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Specify a valid Number of Nodes on the Hill", "Hill Nodes", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String sizeX = txtMaxWidthX.getText();
        if (sizeX == null || sizeX.trim().length() < 1)
        {
            JOptionPane.showMessageDialog(this, "Specify the Width of the Hill", "Hill Width", JOptionPane.ERROR_MESSAGE);
            return;
        }        
        try
        {
            Integer.parseInt(sizeX);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Specify a valid Width of the Hill", "Hill Width", JOptionPane.ERROR_MESSAGE);
            return;
        }        
        String sizeY = txtMaxHeightY.getText();
        if (sizeY == null || sizeY.trim().length() < 1)
        {
            JOptionPane.showMessageDialog(this, "Specify the Height of the Hill", "Hill Height", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try
        {
            Integer.parseInt(sizeY);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Specify a valid Height of the Hill", "Hill Height", JOptionPane.ERROR_MESSAGE);
            return;
        }
        txtCurrentRow.setText("");
        txtCurrentX.setText("");
        txtCurrentY.setText("");
        txtNeiX.setText("");
        txtNeiY.setText("");
        
        int nsize = Integer.parseInt(size);
        int[] pointX = new int[nsize];
        int[] pointY = new int[nsize];
        for (int i = 1; i < nsize-1; i++)
        {
          // pointX[i]= rand.nextInt(Integer.parseInt(sizeX));
           pointX[i]=  i * (Integer.parseInt(sizeX)/nsize);
           pointY[i]= rand.nextInt(Integer.parseInt(sizeY));
        }
        pointX[0]= 0;
        pointY[0]= 0;
        pointX[nsize-1]= Integer.parseInt(sizeX);
        pointY[nsize-1]= 0;        
        loadTable(pointX, pointY);
       // jPanel2.removeAll();
        JFreeChart chart = createChart(pointX, pointY);
        displayMyChart(chart);
    }//GEN-LAST:event_pbGenerateXYMouseClicked

    public void displayMyChart(JFreeChart chart) {
        jPanel2.removeAll();
        ChartPanel p2 = new ChartPanel(chart);
        p2.setSize(jPanel2.getSize());
        jPanel2.add(p2);
        jPanel2.repaint();
    }


    /**
     * the event for the hill climbing search
     * 1. Initialize the first visited row as start row
     * 2. Get th current neighbours of the start row.
     * 3. evaluate neighbours to determine the max height node
     * 4. compare the max height node with current node
     * 5. if new node is higher then climb to the new node
     * 5. if new node is lower then current location is optimum node.
     * 
     * Note: Optimum might be a local maximum
     * @param evt 
     */
    private void pbPlotMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pbPlotMouseClicked
        // TODO add your handling code here
        
        int row = jTable1.getSelectedRow();

        if (row < 0)
        {
            JOptionPane.showMessageDialog(this, "Please Select a Start Node for the Hill", "Hill Start Node", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int currentNode = row ;
        int maxNode = -1;
        int maxNodeHeight = -1;
        int currentNodeHeight = -1;
        visitedRows.add(currentNode);
        hillVisitedRows.add(currentNode);
        do 
        {
          //  maximumNode = currentNode;
            int[] neigbrs = getNeighbours(currentNode);
                maxNode = evaluateMaximum(neigbrs[0], neigbrs[1]);
                maxNodeHeight = evaluateNode(maxNode);
                currentNodeHeight = evaluateNode(currentNode);
                if (maxNodeHeight <= currentNodeHeight)
                {
                    //local maximum found;
                  break;
                   
                }
                 currentNode = maxNode;
                 visitedRows.add(currentNode);
                 hillVisitedRows.add(currentNode);
                 txtNeiX.setText((String)jTable1.getValueAt(currentNode, 1));
                 txtNeiY.setText(maxNodeHeight + "");

            
        }
        while(maxNode == currentNode);
 //       txtCurrentRow.setText(maxNode + "");
        txtEndRow.setText((currentNode) + "");
        int noOfRows = jTable1.getRowCount();
        int[] pointX = new int[noOfRows];
        int[] pointY = new int[noOfRows];
        int[] nodeVisited = new int[noOfRows];
        int[] pointX1 = new int[hillVisitedRows.size()];
        int[] pointY1 = new int[hillVisitedRows.size()];
        int i = 0;
        for (Iterator it = hillVisitedRows.iterator(); it.hasNext();i++)
        {
            int visitrow = ((Integer)it.next()).intValue();
            nodeVisited[i] = visitrow;
            pointX1[i] = Integer.parseInt((String)jTable1.getValueAt(visitrow, 1));
            pointY1[i] = Integer.parseInt((String)jTable1.getValueAt(visitrow, 2));
        }

        
        for ( i = 0; i < noOfRows;i++)
        {
            pointX[i] = Integer.parseInt((String)jTable1.getValueAt(i, 1));
            pointY[i] = Integer.parseInt((String)jTable1.getValueAt(i, 2));
        }      
        
        JFreeChart chart = createChart(pointX, pointY, pointX1, pointY1);
        displayMyChart(chart);   
        
        this.loadVisitedTable(nodeVisited, pointX1, pointY1);
    }//GEN-LAST:event_pbPlotMouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
       int row = jTable1.getSelectedRow();
       txtCurrentX.setText((String)jTable1.getModel().getValueAt(row, 1));
       txtCurrentY.setText((String)jTable1.getModel().getValueAt(row, 2));
       txtCurrentRow.setText((row) + "");
       txtNeiX.setText((String)jTable1.getModel().getValueAt(row, 1));
       txtNeiY.setText((String)jTable1.getModel().getValueAt(row, 2));
       txtEndRow.setText((row) + "");       
    }//GEN-LAST:event_jTable1MouseClicked

    private void pbTabuSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pbTabuSearchMouseClicked
        // TODO add your handling code here:
        tabuRows.clear();
        tabuVisitedRows.clear();        
        int noOfSearch = 5;
        String sSearchNo = this.txtSearchNo.getText();
        try
        {            
            
            if (sSearchNo == null || sSearchNo.trim().length() < 1 )
            {
                JOptionPane.showMessageDialog(this, "Please Enter a value for the number of searches for the Tabu Search", "Tabu Exit Condition", JOptionPane.ERROR_MESSAGE);
                return;
            } 
            noOfSearch = Integer.parseInt(sSearchNo);
        }
        catch(Exception e)
        {
            e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Please Enter a value for the number of searches for the Tabu Search", "Tabu Exit Condition", JOptionPane.ERROR_MESSAGE);
                return;            
        }
        
        
        int currentNode = Integer.parseInt(txtEndRow.getText());
        tabuVisitedRows.add(currentNode);
        while(noOfSearch > 0)
        {
            int[] bestNodes = searchPossibleCandidates(currentNode);
            
            int bestNode = evaluateMaximum(bestNodes[0], bestNodes[1]);
            int bestNodeHeight = evaluateNode(bestNode);
            int currentHeight = evaluateNode(currentNode);
            if (currentHeight >= bestNodeHeight)
            {
                break;
            }
            currentNode = bestNode;
            tabuVisitedRows.add(currentNode);
            visitedRows.add(currentNode);
            noOfSearch--;
        }
        txtEndRow.setText(currentNode + "");
        txtNeiX.setText("" + jTable1.getValueAt(currentNode, 1));
        txtNeiY.setText("" + jTable1.getValueAt(currentNode, 2));
        int noOfRows = jTable1.getRowCount();
        int[] pointX = new int[noOfRows];
        int[] pointY = new int[noOfRows];
        int[] pointX1 = new int[hillVisitedRows.size()];
        int[] pointY1 = new int[hillVisitedRows.size()];
        int[] pointX2 = new int[tabuVisitedRows.size()];
        int[] pointY2 = new int[tabuVisitedRows.size()]; 
        int[] visitedNodes = new int[visitedRows.size()];
        int[] visitedX = new int[visitedRows.size()];
        int[] visitedY = new int[visitedRows.size()];         
        int i = 0;
        
        for (Iterator it = tabuVisitedRows.iterator(); it.hasNext();i++)
        {
            int visitrow = ((Integer)it.next()).intValue();
            pointX2[i] = Integer.parseInt((String)jTable1.getValueAt(visitrow, 1));
            pointY2[i] = Integer.parseInt((String)jTable1.getValueAt(visitrow, 2));
        }
         i = 0;
        for (Iterator it = hillVisitedRows.iterator(); it.hasNext();i++)
        {
            int visitrow = ((Integer)it.next()).intValue();
            pointX1[i] = Integer.parseInt((String)jTable1.getValueAt(visitrow, 1));
            pointY1[i] = Integer.parseInt((String)jTable1.getValueAt(visitrow, 2));
        }
        
         i = 0;
        for (Iterator it = visitedRows.iterator(); it.hasNext();i++)
        {
            int visitrow = ((Integer)it.next()).intValue();
            visitedNodes[i] = visitrow;
            visitedX[i] = Integer.parseInt((String)jTable1.getValueAt(visitrow, 1));
            visitedY[i] = Integer.parseInt((String)jTable1.getValueAt(visitrow, 2));
        }        

        
        for ( i = 0; i < noOfRows;i++)
        {
            pointX[i] = Integer.parseInt((String)jTable1.getValueAt(i, 1));
            pointY[i] = Integer.parseInt((String)jTable1.getValueAt(i, 2));
        }      
        
        JFreeChart chart = createChart(pointX, pointY, pointX1, pointY1, pointX2, pointY2);
        displayMyChart(chart);   
        
        this.loadVisitedTable(visitedNodes, visitedX, visitedY);  
        
    }//GEN-LAST:event_pbTabuSearchMouseClicked

    private void pbPlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pbPlotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pbPlotActionPerformed

    private void pbClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pbClearMouseClicked
        // TODO add your handling code here:
        tabuRows.clear();
        tabuVisitedRows.clear();
        visitedRows.clear();
        hillVisitedRows.clear();
        txtEndRow.setText("");
        txtNeiX.setText("");
        txtNeiY.setText("");
        tbVisitedNodes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Node", "Position X", "Position Y"
            }
        ));
        
        int noOfRows = jTable1.getRowCount();
        int[] pointX = new int[noOfRows];
        int[] pointY = new int[noOfRows];
        for (int i = 0; i < noOfRows;i++)
        {
            pointX[i] = Integer.parseInt((String)jTable1.getValueAt(i, 1));
            pointY[i] = Integer.parseInt((String)jTable1.getValueAt(i, 2));
        }      
        
        JFreeChart chart = createChart(pointX, pointY);
        displayMyChart(chart);  
    }//GEN-LAST:event_pbClearMouseClicked

     private JFreeChart createChart(int[] pointX, int[] pointY) {


 //       JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, true);

    XYSeriesCollection dataset = this.createDataset1(pointX, pointY);

     JFreeChart chart = ChartFactory.createXYLineChart(
     "Hill Diagram", // Title
     "Width 10m", // x-axis Label
     "Height 10m", // y-axis Label
     dataset, // Dataset
     PlotOrientation.VERTICAL, // Plot Orientation
     true, // Show Legend
     true, // Use tooltips
     false // Configure chart to generate URLs?
     );    

    return chart;
}
     
   private JFreeChart createChart(int[] pointX, int[] pointY, int[] pointX1, int[] pointY1) {


    XYSeries xyset = this.createDatasetOnly("Hill Nodes", pointX, pointY);
    XYSeries xyset1 = this.createDatasetOnlyStep1("Visited Nodes", pointX1, pointY1);
    XYSeriesCollection dataset = new XYSeriesCollection();
    dataset.addSeries(xyset);
    dataset.addSeries(xyset1);

     JFreeChart chart = ChartFactory.createXYLineChart(
     "Hill Diagram", // Title
     "Width 10m", // x-axis Label
     "Height 10m", // y-axis Label
     dataset, // Dataset
     PlotOrientation.VERTICAL, // Plot Orientation
     true, // Show Legend
     true, // Use tooltips
     false // Configure chart to generate URLs?
     );    

    return chart;
}  
      private JFreeChart createChart(int[] pointX, int[] pointY, int[] pointX1, int[] pointY1,int[] pointX2, int[] pointY2) {


    XYSeries xyset = this.createDatasetOnly("Hill Nodes", pointX, pointY);
    XYSeries xyset1 = this.createDatasetOnlyStep1("Visited Hill Nodes", pointX1, pointY1);
    XYSeries xyset2 = this.createDatasetOnlyStep1("Tabu Nodes", pointX2, pointY2);
    XYSeriesCollection dataset = new XYSeriesCollection();
    dataset.addSeries(xyset);
    dataset.addSeries(xyset1);
    dataset.addSeries(xyset2);

     JFreeChart chart = ChartFactory.createXYLineChart(
     "Hill Diagram", // Title
     "Width 10m", // x-axis Label
     "Height 10m", // y-axis Label
     dataset, // Dataset
     PlotOrientation.VERTICAL, // Plot Orientation
     true, // Show Legend
     true, // Use tooltips
     false // Configure chart to generate URLs?
     );    

    return chart;
} 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HillClimbingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HillClimbingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HillClimbingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HillClimbingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                HillClimbingFrame frm = new HillClimbingFrame();
               // frm.setSize(200, 100);
               HillClimbingFrame.centerScreen(frm);
                frm.setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton pbClear;
    private javax.swing.JButton pbGenerateXY;
    private javax.swing.JButton pbPlot;
    private javax.swing.JButton pbTabuSearch;
    private javax.swing.JTable tbVisitedNodes;
    private javax.swing.JTextField txtCurrentRow;
    private javax.swing.JTextField txtCurrentX;
    private javax.swing.JTextField txtCurrentY;
    private javax.swing.JTextField txtEndRow;
    private javax.swing.JTextField txtMaxHeightY;
    private javax.swing.JTextField txtMaxWidthX;
    private javax.swing.JTextField txtNeiX;
    private javax.swing.JTextField txtNeiY;
    private javax.swing.JTextField txtProblemXLen;
    private javax.swing.JTextField txtSearchNo;
    // End of variables declaration//GEN-END:variables

    private void loadTable(int[] pointX, int[] pointY) {
       String[] headers ={ "Position",  "Point X", "Point Y" };
       String[][] data = new String[pointX.length][3];
       for (int i = 0; i < pointX.length; i++)
       {
           data[i][0] = (i) + "";
           data[i][1]= pointX[i] + "";
           data[i][2]= pointY[i] + "";
           System.out.println("" + pointX[i]  + ", " +  pointY[i]);
       }
       
       jTable1.setModel(new DefaultTableModel(data, headers));
       jScrollPane1.setViewportView(jTable1);
    }
    
    private void loadVisitedTable(int node[], int[] pointX, int[] pointY) {
       String[] headers ={ "Visited Node",  "Point X", "Point Y" };
       String[][] data = new String[pointX.length][3];
       for (int i = 0; i < pointX.length; i++)
       {
          // data[i][0] = (i+1) + "";
           data[i][0] = node[i] + "";
           data[i][1]= pointX[i] + "";
           data[i][2]= pointY[i] + "";
           System.out.println("" + pointX[i]  + ", " +  pointY[i]);
       }
       
       tbVisitedNodes.setModel(new DefaultTableModel(data, headers));
       jScrollPane2.setViewportView(tbVisitedNodes);
    }    

    private XYSeriesCollection createDataset1(int[] pointX, int[] pointY) {
     //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
     XYSeries series = new XYSeries("Hill Nodes");
     
        for (int i = 0; i < pointX.length; i++)
       {
           series.add(pointX[i], pointY[i]);

           System.out.println("" + pointX[i]  + ", " +  pointY[i]);
       }
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        return dataset;
    }
    
     private XYSeries createDatasetOnly(String title, int[] pointX, int[] pointY) {
     //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
     XYSeries series = new XYSeries(title);
     
        for (int i = 0; i < pointX.length; i++)
       {
           series.add(pointX[i], pointY[i]);

           System.out.println("" + pointX[i]  + ", " +  pointY[i]);
       }

        return series;
    }
     
     private XYSeries createDatasetOnlyStep1(String title, int[] pointX, int[] pointY) {
     //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
     XYSeries series = new XYSeries(title);
     
        for (int i = 0; i < pointX.length; i++)
       {
           series.add(pointX[i], pointY[i]+1);

           System.out.println("" + pointX[i]  + ", " +  pointY[i]);
       }

        return series;
    }     

    private int[] getNeighbours(int currentNode) {
        int neighbourbound = 1;
        int[] neighbors = new int[neighbourbound * 2];
            neighbors[0] = currentNode-1;
            neighbors[1] = currentNode+1;
            
            return neighbors;
   
    }
/**
 * the method to evaluate the maximum hieght node between the neighbor and the formaer maximum
 * @param maximumNode - current Maximum Node
 * @param neigbrNode - current Neighboru
 * @return boolean - success if the neighbor is new max
 */
    private int evaluateMaximum(int preNode, int postNode) {
        int maxNode = preNode;
        if (preNode >= jTable1.getModel().getRowCount())
        {
            preNode = jTable1.getModel().getRowCount() -1;
        } 
        if (preNode < 0)
        {
            preNode = 0;
        }         
        if (postNode >= jTable1.getModel().getRowCount())
        {
            postNode = jTable1.getModel().getRowCount() -1;
        } 
        if (postNode < 0)
        {
            postNode = 0;
        } 
        int heightPreNode = evaluateNode(preNode);
        int heightPostNode = evaluateNode(postNode);
        
        if (heightPreNode <= heightPostNode)
        {
            maxNode = postNode;
        }

        
        return maxNode;
    }
/**
 * evaluate the value of the node
 * @param neigbrNode
 * @return
 * @throws NumberFormatException 
 */
    public int evaluateNode(int neigbrNode) throws NumberFormatException {
        if ((neigbrNode) < 0 && (neigbrNode >= jTable1.getRowCount()))
                {
                    return 0;
                }
        int heightNeigbor = Integer.parseInt((String)jTable1.getModel().getValueAt(neigbrNode, 2));
        return heightNeigbor;
    }
/**
 * search for possible candidates for a tabu search
 * @param currentNode
 * @return int[] the possible candidatees
 */
   private int[] searchPossibleCandidates(int currentNode) 
   {
       int currentHeight = evaluateNode(currentNode);
       int topNode= jTable1.getModel().getRowCount() -1;
       int[] candidates = new int[2];
       for (int i = (currentNode-1); i >=  0; i--) 
       {
           int nodeHeight = evaluateNode(i);
       //    int currentHeight = evaluateNode(currentNode);
           if (nodeHeight > currentHeight)
           {
               candidates[0] = i;
               break;
           }
           else
           {
               tabuRows.add(i);
           }
       }
       
       for (int i = (currentNode+1); i <=  topNode; i++) 
       {
           int nodeHeight = evaluateNode(i);
           
           if (nodeHeight > currentHeight)
           {
               candidates[1] = i;
               break;
           }
           else
           {
               tabuRows.add(i);
           }
       }   
       return candidates;
   }

 
}
